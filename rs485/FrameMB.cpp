/*
	Author:		R.Gorohov (K1 SOFT)

	FrameMB.h
	Определение класса FrameMB.
*/

#include "StdAfx.h"
#include "FrameMB.h"

#include <algorithm>

#include "rs485.h"

/**
 *	Конструктор. Строит фрейм по заданным бинарным данным.
 *	\param address адрес устройства MODBUS.
 *	\param data бинарные данные.
 *	\param len размер массива данных в байтах.
 */
FrameMB::FrameMB(BYTE address, const BYTE* data, int len)
: address_(address)
, binData_(0)
, binDataLen_(0)
, asciiData_(0)
, asciiDataLen_(0)
, isLRCValid_(true)
{
	LOG_Info("New Frame from binary: ", data, len);
	AllocBinaryData(len);
	memcpy(binData_, data, len);
	LOG_Info("New Frame from binary verify: ", binData_, len);

	SetAsciiFrameFromBinaryData();

	LOG_Info("New Frame result ascii data: ", asciiData_, asciiDataLen_);
}

/**
 *	Конструктор. Строит копию заданного ASCII фрейма.
 *	\param data буфер с ASCII фреймом.
 *	\param len размер буфера в байтах.
 */
FrameMB::FrameMB(const BYTE* data, int len)
: address_(0)
, binData_(0)
, binDataLen_(0)
, asciiData_(0)
, asciiDataLen_(0)
, isLRCValid_(true)
{
	LOG_Info("New Frame from ASCII: ", data, len);

	AllocAsciiData(len);
	memcpy(asciiData_, data, len);

	LOG_Info("New Frame from ASCII  verify: ", asciiData_, len);

	SetBinaryDataFromAsciiFrame();

	LOG_Info("New Frame from ASCII after SetBinaryDataFromAsciiFrame: ", asciiData_, len);

	// проверка LRC
	BYTE lrc = CalculateLRC(asciiData_+1, asciiDataLen_-1-2-2);

	LOG_Info("LRC for: ", asciiData_+1, asciiDataLen_-1-2-2);
	LOG_Error("is %d\n", lrc);

	BYTE asciiLrc[2];
	ConvertBin2Ascii(asciiLrc, 2, &lrc, 1);
	isLRCValid_ = ((asciiLrc[0]==asciiData_[asciiDataLen_-4])&&(asciiLrc[1]==asciiData_[asciiDataLen_-3]));

	LOG_Info("New Frame from ASCII result binary data: ", binData_, binDataLen_);
}

/**
 *	Деструктор.
 */
FrameMB::~FrameMB(void)
{
	FreeAsciiData();
	FreeBinaryData();
}

/**
 *	Выделяет бинарные данные из ASCII фрейма.
 */
void FrameMB::SetBinaryDataFromAsciiFrame()
{
	AllocBinaryData( (asciiDataLen_-1-2-2-2)/2 );

	ConvertAscii2Bin(&address_, 1, asciiData_+1, 2);
	ConvertAscii2Bin(binData_, binDataLen_, asciiData_+1+2, asciiDataLen_-1-2-2-2);
}

/**
 *	Формирует ASCII фрейм из бинарных данных.
 */
void FrameMB::SetAsciiFrameFromBinaryData()
{
	AllocAsciiData( 1 + 2 + 2*binDataLen_ + 2 + 2 ); // +'colon' +2*address + 2*data + 2LRC + 2end

	ConvertBin2Ascii(asciiData_+1, 2, &address_, 1);

	ConvertBin2Ascii(asciiData_+3, 2*binDataLen_, binData_, binDataLen_);

	BYTE lrc = CalculateLRC(asciiData_+1, asciiDataLen_-1-2-2);
	ConvertBin2Ascii(asciiData_+1+2+2*binDataLen_, 2, &lrc, 1);
	
	asciiData_[0] = 0x3A; // ':'
	asciiData_[asciiDataLen_-2] = 0x0D;
	asciiData_[asciiDataLen_-1] = 0x0A;
}

/**
 *	Сбрасывает буфер с бинарными данными.
 */
void FrameMB::FreeBinaryData()
{
	if( binDataLen_ )
	{
		delete[] binData_;
		binData_ = 0;
		binDataLen_ = 0;
	}
}

/**
 *	Сбрасывает буфер с ASCII представлением фрейма.
 */
void FrameMB::FreeAsciiData()
{
	if( asciiDataLen_ )
	{
		delete[] asciiData_;
		asciiData_ = 0;
		asciiDataLen_ = 0;
	}
}

/**
 *	Выделяет буфер под бинарные данные.
 */
void FrameMB::AllocBinaryData(unsigned short len)
{
	FreeBinaryData();
	binData_ = new BYTE[len];
	binDataLen_ = len;
}

/**
 *	Выделяет буфер под ASCII фрейм.
 */
void FrameMB::AllocAsciiData(unsigned short len)
{
	FreeAsciiData();
	asciiData_ = new BYTE[len];
	asciiDataLen_ = len;
}

/**
 *	Возвращает указатель на буфер с ASCII фреймом.
 *	\return указатель на буфер с ASCII фреймом.
 */
const BYTE* FrameMB::GetAsciiFrame()
{
	return asciiData_;
}

/**
 *	Возвращает размер ASCII фрейма.
 *	\return размер ASCII фрейма.
 */
unsigned short FrameMB::GetAsciiFrameLen()
{
	return asciiDataLen_;
}
	
/**
 *	Возвращает адрес из поля адреса фрейма.
 *	\return адрес в бинарном виде.
 */
BYTE FrameMB::GetAddress()
{
	return address_;
}

/**
 *	Вычисляет LRC заданного массива.
 *	\param data указатель на массив данных.
 *	\param len размер массива в байтах.
 */
BYTE FrameMB::CalculateLRC(const BYTE* data, int len)
{
	BYTE lrc = 0;

	while( len-- )
		lrc += *data++;

	return static_cast<BYTE>(-static_cast<char>(lrc));
}

/*
unsigned char FrameMB::s_crcLo[] = 
{
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
	0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
	0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
	0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
	0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
	0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40
};
unsigned char FrameMB::s_crcHi[] = 
{
	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
	0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
	0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
	0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
	0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
	0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
	0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
	0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
	0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
	0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
	0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
	0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
	0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
	0x40
};
*/

unsigned char FrameMB::s_hexTable[16] = 
{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };


/**
 *	Конвертирует бинарный данные в ASCII представление.
 *	\param dst адрес массива, в который сохраняются ASCII данные.
 *	\param dstLen размер массива ASCII данных.
 *	\param src адрес массива, из которого извлекаются бинарные данные.
 *	\param srcLen размер массива с бинарными данными.
 */
void FrameMB::ConvertBin2Ascii(BYTE* dst, int dstLen, const BYTE* src, int srcLen)
{
	int i;
	for(i=0; i<srcLen && (i*2+1)<dstLen; ++i)
	{
		BYTE dstChar = src[i];
		int idx1 = (src[i]>>4) & 0x0F;
		dst[i*2] = s_hexTable[ (src[i]>>4) & 0x0F ];
		int idx2 = src[i] & 0x0F;
		dst[i*2+1] = s_hexTable[ src[i] & 0x0F ];
	}
}

/**
*	Конвертирует ASCII данные в бинарные.
 *	\param dst адрес массива, в который сохраняются бинарные данные.
 *	\param dstLen размер массива бинарных данных.
 *	\param src адрес массива, из которого извлекаются ASCII данные.
 *	\param srcLen размер массива с ASCII данными.
 */
void FrameMB::ConvertAscii2Bin(BYTE* dst, int dstLen, const BYTE* src, int srcLen)
{
	int i;
	for(i=0; i<dstLen && (i*2+1)<srcLen; ++i)
	{
		BYTE chHi = src[i*2];
		BYTE chLo = src[i*2+1];
		BYTE hi, lo;
		if( chHi >= 0x30 && chHi <= 0x39 ) // 0 .. 9
		{
			hi = chHi-0x30;
		}
		else if( chHi >= 0x41 && chHi <= 0x46 ) // A .. F
		{
			hi = chHi - 0x41+0xA;
		}
		else
			hi = 0;

		if( chLo >= 0x30 && chLo <= 0x39 ) // 0 .. 9
		{
			lo = chLo-0x30;
		}
		else if( chLo >= 0x41 && chLo <= 0x46 ) // A .. F
		{
			lo = chLo - 0x41+0xA;
		}
		else
			lo = 0;

		dst[i] = ((hi<<4)&0xF0) | (lo&0x0F);
	}
}

/**
 *	Возвращает указатель на буфер с бинарными данными фрейма.
 *	\return указатель на буфер с бинарными данными фрейма.
 */
const BYTE* FrameMB::GetBinaryData()
{
	return binData_;
}

/**
 *	Возвращает размер буфера с бинарными данными.
 *	\return размер буфера с бинарными данными.
 */
unsigned short FrameMB::GetBinaryLen()
{
	return binDataLen_;
}

bool FrameMB::IsASCIISymbolValid(BYTE ch)
{
	if( (ch >= 0x30) && (ch <= 0x39) ) // 0 .. 9
		return true;

	if( (ch >= 0x41) && (ch <= 0x46) ) // A .. F
		return true;

	return false;
}